#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright 2011 Rackspace
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

""" Wrapper script use to run Tempo jobs.

Handles checking of return codes and publishing of notifications.
"""

import logging
import optparse
import os
import sys

possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'tempo', '__init__.py')):
    sys.path.insert(0, possible_topdir)

import tempo.api
import tempo.db
import tempo.notifier
import tempo.flags


FLAGS = tempo.flags.FLAGS

logger = logging.getLogger('tempo-task-wrapper')


# TODO: refactor to share code with tempo-api?
def parse_opts():
    parser = optparse.OptionParser()
    parser.add_option('--debug', dest='debug', action='store_true',
                      help='Enable debug mode', default=False)
    parser.add_option('--verbose', dest='verbose', action='store_true',
                      help='Enable verbose logging', default=False)
    parser.add_option('--sql_connection', dest='sql_connection',
                      help='SQL Connection', default='sqlite:///tempo.sqlite')
    parser.add_option('--sql_idle_timeout', dest='sql_idle_timeout',
                      help='SQL Idle Timeout', type='int', default=3600)
    options, args = parser.parse_args()
    return options, args


def execute_cmd(task_uuid, cmd):
    def _notify(event_type, return_code=None):
        payload = {'task_uuid': task_uuid}
        if return_code is not None:
            payload['return_code'] = return_code

        publisher_id = "host"  # FIXME: we need configuration
        priority = tempo.notifier.DEBUG
        tempo.notifier.notify(publisher_id, event_type, priority, payload)

    logger.debug("task '%(task_uuid)s' started: '%(cmd)s'" % locals())
    _notify('Started Task') 

    return_code = os.system(cmd)
    if return_code == 0:
        logger.debug("task '%(task_uuid)s' finished: returned successfully"
                     % locals())
        _notify('Finished Task') 
    else:
        logger.error("task '%(task_uuid)s' errored: ret=%(return_code)s"
                     % locals())
        _notify('Errored Task', return_code=return_code) 


def configure_logging(opts):
    logger.setLevel(logging.DEBUG)
    stream_handler = logging.StreamHandler()

    if opts.debug:
        level = logging.DEBUG
    elif opts.verbose:
        level = logging.INFO
    else:
        level = logging.WARN

    stream_handler.setLevel(level)
    logger.addHandler(stream_handler)
    return level

if __name__ == '__main__':
    opts, args = parse_opts()
    level = configure_logging(opts)
    tempo.db.configure_db(opts)

    tempo.notifier.configure_notifier('rabbit')

    if len(sys.argv) < 2:
        print "tempo-task-wrapper <uuid> '<cmd>'"
        sys.exit(1)

    task_uuid = sys.argv[1]
    cmd = sys.argv[2]

    ##try:
    ##    task = tempo.db.task_get(uuid)
    ##except tempo.db.api.NotFoundException as e:
    ##    print >> sys.stderr, "Task '%(uuid)s' not found" % locals()
    ##    sys.exit(1)

    execute_cmd(task_uuid, cmd)
